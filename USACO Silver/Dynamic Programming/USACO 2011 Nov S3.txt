Problem 3: Tile Exchanging [Ray Li]

Farmer John wants to remodel the floor of his barn using a collection of
square tiles he recently purchased from the local square mart store (which
of course, only sells square objects).  Unfortunately, he didn't measure
the size of the barn properly before making his purchase, so now he needs
to exchange some of his tiles for new square tiles of different sizes.

The N square tiles previously purchased by FJ have side lengths A_1...A_N.
He would like to exchange some of these with new square tiles so that the
total sum of the areas of the his tiles is exactly M.  Square mart is
currently offering a special deal: a tile of side length A_i can be
exchanged for a new tile of side length B_i for a cost of 
|A_i-B_i|*|A_i-B_i| units. However, this deal only applies to
previously-purchased tiles -- FJ is not allowed to exchange a tile that he
has already obtained via exchanging some other tile (i.e., a size-3 tile
cannot be exchanged for a size-2 tile, which is then exchanged for a size-1
tile). 

Please determine the minimum amount of money required to exchange tiles so
that the sum of the areas of the tiles becomes M.  Output -1 if it is
impossible to obtain an area of M.

PROBLEM NAME: tilechng

INPUT FORMAT:

* Line 1: Two space-separated integers, N (1<=N<=10) and M
        (1<=M<=10,000).

* Lines 2..1+N: Each line contains one of the integers A_1 through
        A_N, describing the side length of an input square
        (1<=A_i<=100).

SAMPLE INPUT (file tilechng.in):

3 6
3
3
1

INPUT DETAILS:

There are 3 tiles.  Two are squares of side length 3, and one is a square
with side length 1.  We would like to exchange these to make a total area of 6.

OUTPUT FORMAT:

* Line 1: The minimum cost of exchanging tiles to obtain M units of
        total area, or -1 if this is impossible.

SAMPLE OUTPUT (file tilechng.out):

5

OUTPUT DETAILS:

Exchange one of the side-3 squares for a side-2 square, and another side-3
square for a side-1 square.  This gives the desired area of 4+1+1=6 and
costs 4+1=5 units.

Solution Notes: This problem is solved with dynamic programming. Let best[i][j] denote the minimum cost of building a total area of i by exchanging only tiles 1 through j (or infinity if it is impossible to do so). As a base case, we have best[0][0] = 0 and best[i>0][0] = infinity. Otherwise, we can compute best[i][j] using the following recursive formula:

best[i][j] = min (k-A[j])^2 + best[i-k*k][j-1]

where the minimum is taken over k, the side length of the tile we exchange for the final tile j. The formula above can be interpreted as saying that the cost of an optimal solution for subproblem best[i][j] that ends by exchanging tile j for one of side length k is given by the cost of the exchange, (k-A[j])^2, plus the optimal cost for building the remaining area of i-k*k using only the remaining tiles 1 through j-1. Since k*k <= i <= M and j <= N, the total number of iterations of the inner loop of this solution is at most 10*100*10,000 = 10 million, so this solution should easily run in time.

Note that the statement for this problem did not specify whether exchanges for zero-area tiles were allowed, so we designed our test data so that this case would not be an issue (i.e., programs should get correct answers regardless of which assumption they make concerning exchanges for zero-area tiles).



#include <stdio.h>

#define MAX_M 10000
#define MAX_N 10
#define INF 1000000000

int best[MAX_M+1][MAX_N+1];
int A[MAX_M+1];

int main(void)
{
  int M, N, i, j, k;

  freopen ("tilechng.in", "r", stdin);
  freopen ("tilechng.out", "w", stdout);

  scanf ("%d %d", &N, &M);
  for (i=1; i<=N; i++)
    scanf ("%d", &A[i]);

  for (i=1; i<=M; i++)
    best[i][0] = INF;

  for (j=1; j<=N; j++)
    for (i=0; i<=M; i++) {
      best[i][j] = INF;
      for (k=1; k*k<=i; k++)
      if ((A[j]-k)*(A[j]-k) + best[i-k*k][j-1] < best[i][j])
        best[i][j] = (A[j]-k)*(A[j]-k) + best[i-k*k][j-1];
    }
  
  if (best[M][N]==INF)
    printf ("-1\n");
  else
    printf ("%d\n", best[M][N]);

  return 0;
}